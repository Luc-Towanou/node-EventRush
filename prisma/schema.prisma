generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model billets {
  id                                                BigInt        @id @default(autoincrement())
  event_id                                          BigInt
  utilisateur_id                                    BigInt
  ticket_id                                         BigInt
  methode                                           String        @default("mobile_money") @db.VarChar(255)
  status                                            String        @default("en_attente") @db.VarChar(255)
  status_scan                                       String        @default("false") @db.VarChar(255)
  scanned_at                                        DateTime?     @db.Date
  montant                                           Decimal       @db.Decimal(10, 2)
  qr_code                                           String?       @unique(map: "billets_qr_code_unique") @db.Uuid
  reference                                         String        @unique(map: "billets_reference_unique") @db.VarChar(191)
  billet_fedapay_id                                 BigInt?
  created_at                                        DateTime?     @db.Timestamp(0)
  updated_at                                        DateTime?     @db.Timestamp(0)
  scanned_by                                        BigInt?
  events                                            events        @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "billets_event_id_foreign")
  utilisateurs_billets_scanned_byToutilisateurs     utilisateurs? @relation("billets_scanned_byToutilisateurs", fields: [scanned_by], references: [id], onUpdate: NoAction, map: "billets_scanned_by_foreign")
  tickets                                           tickets       @relation(fields: [ticket_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "billets_ticket_id_foreign")
  utilisateurs_billets_utilisateur_idToutilisateurs utilisateurs  @relation("billets_utilisateur_idToutilisateurs", fields: [utilisateur_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "billets_utilisateur_id_foreign")
}

model commentaires {
  id             BigInt       @id @default(autoincrement())
  event_id       BigInt
  utilisateur_id BigInt
  contenu        String?
  note           Int?         @db.SmallInt
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  events         events       @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "commentaires_event_id_foreign")
  utilisateurs   utilisateurs @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "commentaires_utilisateur_id_foreign")
}

model email_verifications {
  id         BigInt    @id @default(autoincrement())
  email      String    @unique(map: "email_verifications_email_unique") @db.VarChar(191)
  token      String    @db.VarChar(191)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model event_photos {
  id         BigInt    @id @default(autoincrement())
  event_id   BigInt
  image_path String    @db.VarChar(191)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  events     events    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_photos_event_id_foreign")
}

model event_scanneurs {
  id             BigInt       @id @default(autoincrement())
  event_id       BigInt
  utilisateur_id BigInt
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  events         events       @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_scanneurs_event_id_foreign")
  utilisateurs   utilisateurs @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_scanneurs_utilisateur_id_foreign")
}

model event_vues {
  id             BigInt       @id @default(autoincrement())
  event_id       BigInt
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  utilisateur_id BigInt
  events         events       @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_vues_event_id_foreign")
  utilisateurs   utilisateurs @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_vues_utilisateur_id_foreign")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model events {
  id              BigInt            @id @default(autoincrement())
  utilisateur_id  BigInt
  titre           String            @db.VarChar(191)
  description     String
  date_debut      DateTime          @db.Date
  date_fin        DateTime          @db.Date
  lieu            String            @db.VarChar(191)
  statut          String            @default("brouillon") @db.VarChar(255)
  affiche         String?           @db.VarChar(191)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  points          Int               @default(0)
  nbr_achat       Int               @default(0)
  latitude        Decimal?          @db.Decimal(10, 8)
  longitude       Decimal?          @db.Decimal(11, 8)
  billets         billets[]
  commentaires    commentaires[]
  event_photos    event_photos[]
  event_scanneurs event_scanneurs[]
  event_vues      event_vues[]
  utilisateurs    utilisateurs      @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "events_utilisateur_id_foreign")
  favoris         favoris[]
  orders          orders[]
  point_logs      point_logs[]
  tests           tests[]
  tickets         tickets[]
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(191)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model favoris {
  id             BigInt       @id @default(autoincrement())
  utilisateur_id BigInt
  event_id       BigInt
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  events         events       @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "favoris_event_id_foreign")
  utilisateurs   utilisateurs @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "favoris_utilisateur_id_foreign")

  @@unique([utilisateur_id, event_id], map: "favoris_utilisateur_id_event_id_unique")
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(191)
  batch     Int
}

model notifications {
  id              String    @id @db.Uuid
  type            String    @db.VarChar(191)
  notifiable_type String    @db.VarChar(191)
  notifiable_id   BigInt
  data            String
  read_at         DateTime? @db.Timestamp(0)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)

  @@index([notifiable_type, notifiable_id], map: "notifications_notifiable_type_notifiable_id_index")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model orders {
  id               BigInt         @id @default(autoincrement())
  utilisateur_id   BigInt
  event_id         BigInt
  montantant_total Decimal        @db.Decimal(10, 2)
  statut_paiement  String         @default("en_attente") @db.VarChar(255)
  created_at       DateTime?      @db.Timestamp(0)
  updated_at       DateTime?      @db.Timestamp(0)
  events           events         @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "orders_event_id_foreign")
  utilisateurs     utilisateurs   @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "orders_utilisateur_id_foreign")
  paiements        paiements[]
  transactions     transactions[]
}

model organisateur_profiles {
  id             BigInt          @id @default(autoincrement())
  utilisateur_id BigInt
  nom_entreprise String?         @db.VarChar(191)
  description    String?
  logo           String?         @db.VarChar(191)
  created_at     DateTime?       @db.Timestamp(0)
  updated_at     DateTime?       @db.Timestamp(0)
  utilisateurs   utilisateurs    @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "organisateur_profiles_utilisateur_id_foreign")
  souscriptions  souscriptions[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model paiements {
  id         BigInt    @id @default(autoincrement())
  order_id   BigInt
  montant    Decimal   @db.Decimal(10, 2)
  methode    String    @default("mobile_money") @db.VarChar(255)
  statut     String    @default("en_attente") @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  orders     orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "paiements_order_id_foreign")
}

model password_reset_tokens {
  email      String    @id @db.VarChar(191)
  token      String    @db.VarChar(191)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement())
  tokenable_type String    @db.VarChar(191)
  tokenable_id   BigInt
  name           String    @db.VarChar(191)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model plans_souscriptions {
  id            BigInt          @id @default(autoincrement())
  nom           String          @db.VarChar(191)
  description   String?
  prix          Decimal         @db.Decimal(10, 2)
  duree_jours   Int
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  souscriptions souscriptions[]
}

model point_logs {
  id             BigInt        @id @default(autoincrement())
  utilisateur_id BigInt?
  event_id       BigInt?
  type           String        @db.VarChar(191)
  points         Int
  created_at     DateTime?     @db.Timestamp(0)
  updated_at     DateTime?     @db.Timestamp(0)
  events         events?       @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "point_logs_event_id_foreign")
  utilisateurs   utilisateurs? @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "point_logs_utilisateur_id_foreign")

  @@unique([utilisateur_id, event_id, type], map: "point_logs_utilisateur_id_event_id_type_unique")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model souscriptions {
  id                      BigInt                @id @default(autoincrement())
  organisateur_id         BigInt
  utilisateur_id          BigInt
  date_debut              DateTime              @db.Date
  date_fin                DateTime              @db.Date
  statut                  String                @default("actif") @db.VarChar(255)
  methode                 String                @default("mobile_money") @db.VarChar(255)
  statut_paiement         String                @default("en_attente") @db.VarChar(255)
  montant                 Decimal               @db.Decimal(10, 2)
  reference               String                @unique(map: "souscriptions_reference_unique") @db.VarChar(191)
  souscription_fedapay_id BigInt?
  created_at              DateTime?             @db.Timestamp(0)
  updated_at              DateTime?             @db.Timestamp(0)
  plans_souscription_id   BigInt
  organisateur_profiles   organisateur_profiles @relation(fields: [organisateur_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "souscriptions_organisateur_id_foreign")
  plans_souscriptions     plans_souscriptions   @relation(fields: [plans_souscription_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "souscriptions_plans_souscription_id_foreign")
  utilisateurs            utilisateurs          @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "souscriptions_utilisateur_id_foreign")
  transactions            transactions[]
}

model suivis {
  id                                               BigInt       @id @default(autoincrement())
  utilisateur_id                                   BigInt
  suivi_id                                         BigInt
  created_at                                       DateTime?    @db.Timestamp(0)
  updated_at                                       DateTime?    @db.Timestamp(0)
  utilisateurs_suivis_suivi_idToutilisateurs       utilisateurs @relation("suivis_suivi_idToutilisateurs", fields: [suivi_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "suivis_suivi_id_foreign")
  utilisateurs_suivis_utilisateur_idToutilisateurs utilisateurs @relation("suivis_utilisateur_idToutilisateurs", fields: [utilisateur_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "suivis_utilisateur_id_foreign")
}

model tags {
  id         BigInt    @id @default(autoincrement())
  nom        String    @unique(map: "tags_nom_unique") @db.VarChar(191)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model tests {
  id          BigInt    @id @default(autoincrement())
  qr_code     String    @unique(map: "tests_qr_code_unique") @db.VarChar(191)
  event_id    BigInt
  status_scan String    @default("non_scanné") @db.VarChar(191)
  scanned_at  DateTime? @db.Timestamp(0)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  image       String?   @db.VarChar(191)
  events      events    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tests_event_id_foreign")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model tickets {
  id                  BigInt    @id @default(autoincrement())
  event_id            BigInt
  type                String    @default("standart") @db.VarChar(191)
  prix                Decimal   @db.Decimal(8, 2)
  image               String?   @db.VarChar(191)
  quantit__disponible Int       @map("quantité_disponible")
  created_at          DateTime? @db.Timestamp(0)
  updated_at          DateTime? @db.Timestamp(0)
  date_limite_vente   DateTime? @db.Timestamp(0)
  quantite_restante   Int       @default(0)
  billets             billets[]
  events              events    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tickets_event_id_foreign")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model transactions {
  id              BigInt         @id @default(autoincrement())
  utilisateur_id  BigInt
  order_id        BigInt?
  souscription_id BigInt?
  reference       String         @unique(map: "transactions_reference_unique") @db.VarChar(191)
  methode         String         @default("mobile_money") @db.VarChar(255)
  status          String         @default("en_attente") @db.VarChar(255)
  montant         Decimal        @db.Decimal(10, 2)
  created_at      DateTime?      @db.Timestamp(0)
  updated_at      DateTime?      @db.Timestamp(0)
  orders          orders?        @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "transactions_order_id_foreign")
  souscriptions   souscriptions? @relation(fields: [souscription_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "transactions_souscription_id_foreign")
  utilisateurs    utilisateurs   @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "transactions_utilisateur_id_foreign")
}

model users {
  id                BigInt    @id @default(autoincrement())
  name              String    @db.VarChar(191)
  email             String    @unique(map: "users_email_unique") @db.VarChar(191)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(191)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model utilisateurs {
  id                                           BigInt                  @id @default(autoincrement())
  nom                                          String                  @db.VarChar(191)
  email                                        String                  @unique(map: "utilisateurs_email_unique") @db.VarChar(191)
  email_verified_at                            DateTime?               @db.Timestamp(0)
  password                                     String                  @db.VarChar(191)
  avatar                                       String?                 @db.VarChar(191)
  otp                                          String?                 @db.VarChar(191)
  otp_expires_at                               DateTime?               @db.Timestamp(0)
  role                                         String                  @default("client") @db.VarChar(191)
  created_at                                   DateTime?               @db.Timestamp(0)
  updated_at                                   DateTime?               @db.Timestamp(0)
  last_seen_at                                 DateTime?               @db.Timestamp(0)
  google_id                                    String?                 @db.VarChar(191)
  points                                       Int                     @default(0)
  statut_compte                                String                  @default("actif") @db.VarChar(191)
  billets_billets_scanned_byToutilisateurs     billets[]               @relation("billets_scanned_byToutilisateurs")
  billets_billets_utilisateur_idToutilisateurs billets[]               @relation("billets_utilisateur_idToutilisateurs")
  commentaires                                 commentaires[]
  event_scanneurs                              event_scanneurs[]
  event_vues                                   event_vues[]
  events                                       events[]
  favoris                                      favoris[]
  orders                                       orders[]
  organisateur_profiles                        organisateur_profiles[]
  point_logs                                   point_logs[]
  souscriptions                                souscriptions[]
  suivis_suivis_suivi_idToutilisateurs         suivis[]                @relation("suivis_suivi_idToutilisateurs")
  suivis_suivis_utilisateur_idToutilisateurs   suivis[]                @relation("suivis_utilisateur_idToutilisateurs")
  transactions                                 transactions[]
}
